cmake_minimum_required(VERSION 3.16)
project(CybersecurityTool VERSION 1.0.0)

# Set C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Include directories
include_directories(${CMAKE_SOURCE_DIR}/include)
include_directories(${CMAKE_SOURCE_DIR}/src)

# Collect source files
file(GLOB_RECURSE SOURCES
    "${CMAKE_SOURCE_DIR}/src/*.cpp"
    "${CMAKE_SOURCE_DIR}/src/core/*.cpp"
    "${CMAKE_SOURCE_DIR}/src/utils/*.cpp"
)

# Collect header files
file(GLOB_RECURSE HEADERS
    "${CMAKE_SOURCE_DIR}/include/*.h"
    "${CMAKE_SOURCE_DIR}/src/*.h"
    "${CMAKE_SOURCE_DIR}/src/core/*.h"
    "${CMAKE_SOURCE_DIR}/src/utils/*.h"
)

# Remove main.cpp from sources for the library
list(FILTER SOURCES EXCLUDE REGEX "main.cpp")

# Create library
add_library(CybersecurityToolLib ${SOURCES} ${HEADERS})

# Create main executable
add_executable(CybersecurityTool src/main.cpp)
target_link_libraries(CybersecurityTool CybersecurityToolLib)

# Create unit tests executable
add_executable(unit_tests tests/unit_tests.cpp)
target_link_libraries(unit_tests CybersecurityToolLib)

# Set output directories
set_target_properties(CybersecurityTool PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_BINARY_DIR}/bin/Debug
    RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR}/bin/Release
)

set_target_properties(unit_tests PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_BINARY_DIR}/bin/Debug
    RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR}/bin/Release
)

# Compiler-specific options
if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    target_compile_options(CybersecurityToolLib PRIVATE -Wall -Wextra -O2)
    target_compile_options(CybersecurityTool PRIVATE -Wall -Wextra -O2)
    target_compile_options(unit_tests PRIVATE -Wall -Wextra -O2)
endif()

if(WIN32)
    target_link_libraries(CybersecurityTool ws2_32)
    target_link_libraries(unit_tests ws2_32)
endif()
